import { Telegraf, Scenes, session } from 'telegraf';
import * as dotenv from 'dotenv';
import { connectDB } from './mongoDB/index';
import { getAllCharacters } from './requests/getAllCharacters';
import { RioContext } from './types';
import { characterWizard } from './scenes/getCurrentRio';
import { upsertWizard } from './scenes/upsertPersona';
import { deleteWizard } from './scenes/deletePersona';
import cron from 'node-cron';
import { getCurrentSeasonIndex } from './requests/getCurrentSeasonInfo';
import { addSeason, findOneSeasonById } from './repositories/season';
import { COMMANDS } from './constants';

dotenv.config();
connectDB();

// const characterScene = new Scenes.BaseScene<Scenes.SceneContext>('characterScene');

// characterScene.enter((ctx) => {
//	 ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:');
// });

// characterScene.on('text', async (ctx) => {
//	 const characterName = ctx.message.text;
//	 ctx.reply(`–í—ã –≤–≤–µ–ª–∏: ${characterName}`);

//	 const info = await getCharacterInfo('silvermoon', `${characterName}`);
//	 ctx.reply(`${info}`);

//	 await ctx.scene.leave();
// });

// const stage = new Scenes.Stage<Scenes.SceneContext>([characterScene]);
const stage = new Scenes.Stage<RioContext>([characterWizard, deleteWizard, upsertWizard]);

const bot = new Telegraf<RioContext>(process.env.TOKEN!);

bot.use(session());
bot.use(stage.middleware());

bot.command('persona', (ctx) => ctx.scene.enter('characterWizard'));
bot.command('all_characters', async (ctx) => {
	const characters = await getAllCharacters();
	if (!characters.length) {
		ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç üôÅ');
		return;
	}

	const text = characters
		.map((character) => `${character.realm}-${character.username} (rio: ${character.rio})`)
		.join('\n');
	ctx.reply(`üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n${text}`);
});
bot.command('delete_persona', (ctx) => ctx.scene.enter('deleteWizard'));
bot.command('upsert_persona', (ctx) => ctx.scene.enter('upsertWizard'));

bot.command('exit', async (ctx) => {
	if (ctx.scene?.current) {
		await ctx.reply('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ ‚ùå');
		await ctx.scene.leave();
	} else {
		await ctx.reply('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã ü§∑‚Äç‚ôÇÔ∏è');
	}
});

bot.on('text', async (ctx, next) => {
	if (ctx.message.text.startsWith('/') || ctx.scene?.current) return next();
	ctx.reply(
		`–í—ã–±–µ—Ä–∏ —á—Ç–æ-—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥: \n\n${COMMANDS.map(
			(command) => `/${command.command} - ${command.description}`,
		)
			.slice(0, -1)
			.join('\n')}`,
	);
});

bot.launch();

bot.telegram.setMyCommands(COMMANDS);

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');

// –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 7:01
cron.schedule('1 7 * * *', async () => {
	console.log('–í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ 12:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å');
	const seasonId = await getCurrentSeasonIndex();
	const oldId = await findOneSeasonById(seasonId);
	if (!oldId) {
		console.log('–Ω–æ–≤—ã–π —Å–µ–∑–æ–Ω –Ω–∞—á–∞–ª—Å—è');
		await addSeason(seasonId);
	}
});
